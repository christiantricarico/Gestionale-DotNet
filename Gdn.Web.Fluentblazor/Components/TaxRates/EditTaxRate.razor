@page "/edit-taxrate"

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation

<PageTitle>Crea aliquota Iva</PageTitle>

<h1>Crea aliquota Iva</h1>

@if (taxRateNatures is not null)
{
    <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit" FormName="edit-taxrate-form">
        <DataAnnotationsValidator />
        <FluentValidationSummary />

        <FluentStack Orientation="Orientation.Vertical">
            <div>
                <FluentTextField Name="Code" @bind-Value="Model.Code" Label="Code" Required />
                <FluentValidationMessage For="@(() => Model.Code)" />
            </div>
            <div>
                <FluentTextField Name="Name" @bind-Value="Model.Name" Label="Name" />
                <FluentValidationMessage For="@(() => Model.Name)" />
            </div>
            <div>
                <FluentTextArea Name="Description" Rows=5 Cols=60 @bind-Value="Model.Description" Label="Description (optional)" />
            </div>
            <div>
                <FluentNumberField Name="Rate" @bind-Value="Model.Rate" />
            </div>
            <div>
                <FluentCombobox Items=@taxRateNatureOptions
                                TOption="Option<int>"
                                OptionText="@(i => i.Text)"
                                OptionValue="@(i => i.Value.ToString())" 
                                @bind-SelectedOption="@selectedTaxRateNatureOption" 
                                @bind-Value="@taxRateNatureValue" />
            </div>
            <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>
        </FluentStack>
    </EditForm>
}

@code {

    private HttpClient HttpClient => HttpClientFactory.CreateApiClientVs();

    [SupplyParameterFromForm]
    private TaxRateInputModel Model { get; set; } = new();

    IEnumerable<TaxRateNatureViewModel>? taxRateNatures;
    List<Option<int>>? taxRateNatureOptions;
    Option<int>? selectedTaxRateNatureOption;
    string? taxRateNatureValue;

    protected override async Task OnInitializedAsync()
    {
        string uri = "taxratenatures";
        taxRateNatures = await HttpClient.GetFromJsonAsync<IEnumerable<TaxRateNatureViewModel>>(uri)
            ?? Enumerable.Empty<TaxRateNatureViewModel>();

        taxRateNatureOptions = taxRateNatures.Select(c => new Option<int>()
            {
                Text = c.Name,
                Value = c.Id
            }).ToList();
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine("HandleValidSubmit called");

        Model.TaxRateNatureId = selectedTaxRateNatureOption?.Value;

        string uri = "taxrates";
        await HttpClient.PostAsJsonAsync<TaxRateInputModel>(uri, Model);
        Navigation.NavigateTo("taxrates");
    }
}
