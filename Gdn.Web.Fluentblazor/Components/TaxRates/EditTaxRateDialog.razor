@implements IDialogContentComponent<DialogContent>
@implements IDisposable

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    @if (Model is not null && _taxRateNatureOptions is not null)
    {
        <EditForm EditContext="EditContext" FormName="edit-taxrate-form">
            <DataAnnotationsValidator />
            <FluentValidationSummary />

            <FluentGrid Spacing="1">
                <FluentGridItem xs="12">
                    <FluentTextField Name="@nameof(TaxRateInputModel.Code)" @bind-Value="Model.Code" Label="Codice" Autofocus="true" Required="true" />
                </FluentGridItem>
                <FluentGridItem xs="12">
                    <FluentTextField Name="@nameof(TaxRateInputModel.Name)" @bind-Value="Model.Name" Label="Nome" Style="width: 100%" />
                </FluentGridItem>
                <FluentGridItem xs="12">
                    <FluentTextArea Name="@nameof(TaxRateInputModel.Description)" Rows="3" Cols="60" @bind-Value="Model.Description" Label="Descrizione" Style="width: 100%" />
                </FluentGridItem>
                <FluentGridItem xs="4">
                    <FluentDecimalField Name="@nameof(TaxRateInputModel.Rate)" Label="Aliquota (%)" Required="true"
                                        @bind-DecimalValue="Model.Rate" />
                </FluentGridItem>
                <FluentGridItem xs="8">
                    <FluentCombobox Items=@_taxRateNatureOptions
                                    TOption="Option<int>"
                                    OptionText="@(i => i.Text)"
                                    OptionValue="@(i => i.Value.ToString())"
                                    OptionSelected="@(i => i.Selected)"
                                    Label="Natura Iva" Style="width: 100%" Height="200px"
                                    Autocomplete="ComboboxAutocomplete.Both"
                                    @bind-SelectedOption="@_selectedTaxRateNatureOption"
                                    Disabled="Model.Rate != 0" />
                </FluentGridItem>
            </FluentGrid>
        </EditForm>
    }

</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent"
                  OnClick="@SaveAsync">
        Salva
    </FluentButton>
</FluentDialogFooter>

@code {

    [Inject]
    private IHttpClientFactory HttpClientFactory { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public DialogContent Content { get; set; } = default!;

    private HttpClient HttpClient => HttpClientFactory.CreateApiClientVs();
    private TaxRateInputModel? Model { get; set; }
    private EditContext EditContext { get; set; } = default!;

    private ValidationMessageStore? _messageStore;
    IEnumerable<TaxRateNatureViewModel>? _taxRateNatures;
    List<Option<int>>? _taxRateNatureOptions;
    Option<int>? _selectedTaxRateNatureOption;
    string? _taxRateNatureValue;

    protected override async Task OnInitializedAsync()
    {
        if (Content.Id == 0)
        {
            Model = new TaxRateInputModel();
        }
        else
        {
            string taxRateUri = $"taxrates/{Content.Id}";
            Model = await HttpClient.GetFromJsonAsync<TaxRateInputModel>(taxRateUri) ?? new();
        }

        EditContext = new EditContext(Model!);
        EditContext.OnValidationRequested += HandleValidationRequested;
        _messageStore = new(EditContext);

        string uri = "taxratenatures";
        _taxRateNatures = await HttpClient.GetFromJsonAsync<IEnumerable<TaxRateNatureViewModel>>(uri)
            ?? Enumerable.Empty<TaxRateNatureViewModel>();

        _taxRateNatureOptions = _taxRateNatures.Select(c => new Option<int>()
            {
                Text = c.Name,
                Value = c.Id,
                Selected = Model.TaxRateNatureId == c.Id
            }).ToList();
    }

    private async Task SaveAsync()
    {
        if (EditContext.Validate())
        {
            Model!.TaxRateNatureId = _selectedTaxRateNatureOption?.Value;

            string uri = "taxrates";
            if (Model.Id == 0)
                await HttpClient.PostAsJsonAsync<TaxRateInputModel>(uri, Model);
            else
                await HttpClient.PutAsJsonAsync<TaxRateInputModel>(uri, Model);

            await Dialog.CloseAsync(Model);
        }
    }

    private void RateChanged(decimal rate)
    {
        Model!.Rate = rate;

        if (rate != 0 && _selectedTaxRateNatureOption is not null)
        {
            _selectedTaxRateNatureOption.Selected = false;
        }
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        _messageStore?.Clear();

        // Custom validation logic
        if (Model!.Rate == 0 && _selectedTaxRateNatureOption is null)
        {
            var fieldIdentifier = new FieldIdentifier(Model, nameof(Model.TaxRateNatureId));
            _messageStore?.Add(fieldIdentifier, "Se Aliquota è 0 devi indicare una Natura Iva.");
        }
    }

    public void Dispose()
    {
        if (EditContext is not null)
            EditContext.OnValidationRequested -= HandleValidationRequested;
    }
}
