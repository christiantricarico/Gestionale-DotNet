@page "/edit-productcategory"

@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Crea categoria prodotto</PageTitle>

<h1>Crea categoria prodotto</h1>

<p>
    This form uses the Fluent UI input components. It uses a <code>DataAnnotationsValidator</code>, a <code>FluentValidationSummary</code>
    and <code>FluentValidationMessage</code>s.
</p>

@if (parentCategories is not null)
{
    <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit" FormName="edit-productcategory-form">
        <DataAnnotationsValidator />
        <FluentValidationSummary />

        <FluentStack Orientation="Orientation.Vertical">
            <div>
                <FluentTextField Name="Code" @bind-Value="Model.Code" Label="Code" Required />
                <FluentValidationMessage For="@(() => Model.Code)" />
            </div>
            <div>
                <FluentTextField Name="Name" @bind-Value="Model.Name" Label="Name" Required />
                <FluentValidationMessage For="@(() => Model.Name)" />
            </div>
            <div>
                <FluentTextArea Name="Description" Rows=5 Cols=60 @bind-Value="Model.Description" Label="Description (optional)" />
            </div>
            <div>
                <FluentCombobox Items=@parentCategoryOptions
                                TOption="Option<int>"
                                OptionText="@(i => i.Text)"
                                OptionValue="@(i => i.Value.ToString())" 
                                @bind-SelectedOption="@selectedParentCategoryOption" 
                                @bind-Value="@parentCategoryValue" />
            </div>
            <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>
        </FluentStack>
    </EditForm>
}

@code {

    [SupplyParameterFromForm]
    private ProductCategoryInputModel Model { get; set; } = new();

    IEnumerable<ProductCategoryViewModel>? parentCategories;
    List<Option<int>>? parentCategoryOptions;
    Option<int>? selectedParentCategoryOption;
    string? parentCategoryValue;

    protected override async Task OnInitializedAsync()
    {
        string uri = "https://localhost:7282/api/productcategory";
        parentCategories = await Http.GetFromJsonAsync<IEnumerable<ProductCategoryViewModel>>(uri)
            ?? Enumerable.Empty<ProductCategoryViewModel>();

        parentCategoryOptions = parentCategories.Select(c => new Option<int>()
            {
                Text = c.Name,
                Value = c.Id
            }).ToList();
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine("HandleValidSubmit called");

        Model.ParentCategoryId = selectedParentCategoryOption?.Value;

        string uri = "https://localhost:7282/api/productcategory/create";
        await Http.PostAsJsonAsync<ProductCategoryInputModel>(uri, Model);
        Navigation.NavigateTo("productcategories");
    }
}
