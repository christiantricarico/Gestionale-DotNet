@page "/"

@inject DialogService Dialog
@inject NotificationService Notification
@inject HttpClient Http

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<RadzenTemplateForm TItem="@ProductCategoryInputModel" Data="@model" Submit="@OnSubmit">
    <RadzenStack Class="rz-p-sm-12">
        <RadzenFormField Text="Codice" Variant="Variant.Flat">
            <ChildContent>
                <RadzenTextBox Name="@nameof(ProductCategoryInputModel.Code)" @bind-Value="model.Code" />
            </ChildContent>
            <Helper>
                <RadzenRequiredValidator Component="@nameof(ProductCategoryInputModel.Code)" Text="Codice è richiesto." />
            </Helper>
        </RadzenFormField>
        <RadzenFormField Text="Nome" Variant="Variant.Flat">
            <ChildContent>
                <RadzenTextBox Name="@nameof(ProductCategoryInputModel.Name)" @bind-Value="model.Name" />
            </ChildContent>
            <Helper>
                <RadzenRequiredValidator Component="@nameof(ProductCategoryInputModel.Name)" Text="Nome è richiesto." />
            </Helper>
        </RadzenFormField>
        <RadzenFormField Text="Descrizione" Variant="Variant.Flat">
            <ChildContent>
                <RadzenTextArea Name="@nameof(ProductCategoryInputModel.Description)" @bind-Value="model.Description" />
            </ChildContent>
        </RadzenFormField>
        <RadzenFormField Text="Categoria padre" Variant="Variant.Flat">
            <RadzenDropDown TValue="@(Nullable<int>)" Data="@productCategories" @bind-Value="@model.ParentCategoryId"
                            Name="@nameof(ProductCategoryInputModel.ParentCategoryId)" ValueProperty="@nameof(ProductCategoryViewModel.Id)"
                            TextProperty="@nameof(ProductCategoryViewModel.Name)" AllowClear="true" />
        </RadzenFormField>
        <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
    </RadzenStack>
</RadzenTemplateForm>

@code {

    ProductCategoryInputModel model = new();
    IEnumerable<ProductCategoryViewModel>? productCategories;
    ProductCategoryViewModel? selectedProductCategory;

    void OnButtonClick()
    {
        Dialog.Alert($"Button clicked!");
    }

    protected override async Task OnInitializedAsync()
    {
        productCategories = await Http.GetFromJsonAsync<IEnumerable<ProductCategoryViewModel>>("productcategory")
            ?? Enumerable.Empty<ProductCategoryViewModel>();
    }

    private async Task OnSubmit(ProductCategoryInputModel model)
    {
        var response = await Http.PostAsJsonAsync("productcategory/create", model);
        if (response.IsSuccessStatusCode)
        {
            ShowNotification(new NotificationMessage() { 
                Severity = NotificationSeverity.Success, 
                Summary = "Categarie prodotto", 
                Detail = "Categoria creata con successo." });
        }
        else
        {
            var strError = await response.Content.ReadAsStringAsync();
            var error = JsonSerializer.Deserialize<ErrorViewModel>(strError, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
            Console.WriteLine($"Error: {error?.Code} - {error?.Description}");
        }
    }

    private void ShowNotification(NotificationMessage message)
    {
        Notification.Notify(message);
    }
}