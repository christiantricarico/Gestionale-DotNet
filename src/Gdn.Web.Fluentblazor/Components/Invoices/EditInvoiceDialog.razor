@implements IDialogContentComponent<DialogContent>

@inject IDialogService DialogService

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    @if (Model is not null)
    {
        <EditForm EditContext="EditContext" FormName="edit-invoice-form">
            <DataAnnotationsValidator />
            <FluentGrid Spacing="1">
                <FluentGridItem xs="12" sm="3">
                    <FluentTextField Name="@nameof(InvoiceInputModel.Number)" @bind-Value="Model.Number" Label="Numero"
                    Autofocus="true" Required="true" Style="width: 100%" />
                    <FluentValidationMessage For="@(() => Model.Number)" />
                </FluentGridItem>
                <FluentGridItem xs="12" sm="3">
                    <FluentDatePicker Name="@nameof(InvoiceInputModel.DateWithTime)" @bind-Value="Model.DateWithTime" Label="Data"
                    Required="true" Style="width: 100%" />
                    <FluentValidationMessage For="@(() => Model.DateWithTime)" />
                </FluentGridItem>
                <FluentGridItem xs="12" sm="6">
                    <FluentCombobox Items=@Customers
                    TOption="CustomerViewModel"
                    SelectedOption="SelectedCustomer"
                    SelectedOptionChanged="o => SelectedCustomerChanged(o)"
                    Required="true"
                    OptionText="@(c => c?.Name)"
                    Label="Cliente" Height="200px"
                    Autocomplete="ComboboxAutocomplete.Both" Style="width: 100%" />
                    <FluentValidationMessage For="@(() => Model.CustomerId)" />
                </FluentGridItem>
                <FluentGridItem xs="12">
                    <FluentStack>
                        <FluentStack Orientation="Orientation.Vertical" Width="40px" Style="margin-top: 43px">
                            <FluentButton IconStart="@(new Icons.Regular.Size24.Add())" OnClick="AddRowClick" />
                        </FluentStack>
                        <FluentDataGrid Items="Rows.AsQueryable()" ShowHover="true">
                            <PropertyColumn Property="@(p => p.Id)" />
                            <PropertyColumn Property="@(p => p.Description)" Title="Descrizione" />
                            <PropertyColumn Property="@(p => p.TaxRateName)" Title="Aliq.Iva" />
                            <PropertyColumn Property="@(p => p.MeasurementUnitName)" Title="Um" />
                            <PropertyColumn Property="@(p => p.Quantity)" Title="Quantità" Format="N2" Align="Align.End" />
                            <PropertyColumn Property="@(p => p.UnitPrice)" Title="Prezzo" Format="C" Align="Align.End" />
                            <PropertyColumn Property="@(p => p.TotalAmount)" Title="Totale" Format="C" Align="Align.End" />
                            <TemplateColumn Title="Azioni" Align="@Align.End" Context="rowContext">
                                <FluentButton aria-label="Modifica" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => EditRowClick(rowContext))" />
                                <FluentButton aria-label="Elimina" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteRowClick(rowContext))" />
                            </TemplateColumn>
                        </FluentDataGrid>
                    </FluentStack>

                </FluentGridItem>
            </FluentGrid>
        </EditForm>
    }
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">
        Salva
    </FluentButton>
</FluentDialogFooter>

@code {

    [Inject]
    private IHttpClientFactory HttpClientFactory { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public DialogContent Content { get; set; } = default!;

    private HttpClient HttpClient => HttpClientFactory.CreateApiClientVs();
    private InvoiceInputModel Model { get; set; } = default!;
    private EditContext EditContext { get; set; } = default!;

    IEnumerable<CustomerViewModel>? Customers;
    CustomerViewModel? SelectedCustomer;

    ICollection<InvoiceRowViewModel> Rows = [];

    protected override async Task OnInitializedAsync()
    {
        if (Content.Id == 0)
            Model = new InvoiceInputModel();
        else
        {
            string invoiceUri = $"invoices/{Content.Id}";
            var viewModel = await HttpClient.GetFromJsonAsync<InvoiceViewModel>(invoiceUri) ?? new();
            
            Model = new InvoiceInputModel
                {
                    Id = viewModel.Id,
                    Number = viewModel.Number,
                    DateWithTime = viewModel.Date.ToDateTime(TimeOnly.MinValue),
                    CustomerId = viewModel.CustomerId,
                    Rows = viewModel.Rows.Select(r => new InvoiceRowInputModel
                    {
                        Id = r.Id,
                        Description = r.Description,
                        TaxRateId = r.TaxRateId,
                        MeasurementUnitId = r.MeasurementUnitId,
                        Quantity = r.Quantity ?? 0,
                        UnitPrice = r.UnitPrice ?? 0
                    }).ToList()
                };

            Rows = viewModel.Rows.ToList();
        }

        EditContext = new EditContext(Model);

        string customersUri = "customers";
        Customers = await HttpClient.GetFromJsonAsync<IEnumerable<CustomerViewModel>>(customersUri)
            ?? Enumerable.Empty<CustomerViewModel>();

        if (Model.CustomerId.HasValue)
            SelectedCustomer = Customers.SingleOrDefault(c => c.Id == Model.CustomerId);
    }

    private void SelectedCustomerChanged(CustomerViewModel? customer)
    {
        SelectedCustomer = customer;
        Model.CustomerId = customer?.Id;
    }

    private async Task SaveAsync()
    {
        if (EditContext.Validate())
        {
            string uri = "invoices";
            if (!Model.Id.HasValue)
                await HttpClient.PostAsJsonAsync<InvoiceInputModel>(uri, Model);
            else
                await HttpClient.PutAsJsonAsync<InvoiceInputModel>(uri, Model);

            await Dialog.CloseAsync(Model);
        }
    }

    private async Task AddRowClick(MouseEventArgs ea)
    {
        DialogContent content = new();
        DialogParameters parameters = new()
            {
                Title = $"Creazione riga fattura",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
                TrapFocus = false,
                Width = "700px"
            };

        var dialog = await DialogService.ShowDialogAsync<EditInvoiceRowDialog>(content, parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var dataSet = result.Data as EditInvoiceRowDataSet;
            if (dataSet is not null && dataSet.Input is not null)
            {
                Model.Rows.Add(dataSet.Input);
                Rows.Add(new()
                    {
                        Description = dataSet.Input.Description,
                        TaxRateName = dataSet.SelectedTaxRate?.Name,
                        MeasurementUnitName = dataSet.SelectedMeasurementUnit?.Name,
                        Quantity = dataSet.Input.Quantity,
                        UnitPrice = dataSet.Input.UnitPrice
                    });
            }
        }
    }

    private async Task EditRowClick(InvoiceRowViewModel context)
    {
        InvoiceInputModel model = new();
        DialogContent content = new() { Id = Convert.ToInt32(context.Id) };
        DialogParameters parameters = new()
            {
                Title = $"Modifica riga fattura",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
                TrapFocus = false,
                Width = "700px"
            };

        var dialog = await DialogService.ShowDialogAsync<EditInvoiceRowDialog>(content, parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var dataSet = result.Data as EditInvoiceRowDataSet;
            if (dataSet is not null && dataSet.Input is not null)
            {
                var inputModel = Model.Rows.Single(r => r.Id == dataSet.Input.Id);
                inputModel.InputStatus = dataSet.Input.InputStatus;
                inputModel.Description = dataSet.Input.Description;
                inputModel.TaxRateId = dataSet.Input.TaxRateId;
                inputModel.MeasurementUnitId = dataSet.Input.MeasurementUnitId;
                inputModel.Quantity = dataSet.Input.Quantity;
                inputModel.UnitPrice = dataSet.Input.UnitPrice;

                var viewModel = Rows.Single(r => r.Id == dataSet.Input.Id);
                viewModel.Description = dataSet.Input.Description;
                viewModel.TaxRateId = dataSet.Input.TaxRateId;
                viewModel.TaxRateName = dataSet.SelectedTaxRate?.Name;
                viewModel.MeasurementUnitId = dataSet.Input.MeasurementUnitId;
                viewModel.MeasurementUnitName = dataSet.SelectedMeasurementUnit?.Name;
                viewModel.Quantity = dataSet.Input.Quantity;
                viewModel.UnitPrice = dataSet.Input.UnitPrice;
            }
        }
    }

    private async Task DeleteRowClick(InvoiceRowViewModel context)
    {
        var dialog = await DialogService.ShowConfirmationAsync("Sei sicuro di voler eliminare questo elemento?", "Sì", "No", "Eliminazione");
        var result = await dialog.Result;
        if (result.Cancelled)
            return;

        // set input model as deleted
        var inputModel = Model.Rows.Single(r => r.Id == context.Id);
        inputModel.InputStatus = 3; 

        // delete view model
        Rows.Remove(context);
    }
}
