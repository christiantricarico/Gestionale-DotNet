@page "/taxrates"

@inject IHttpClientFactory HttpClientFactory
@inject IDialogService DialogService

<h3>Aliquote Iva</h3>

@if (isLoading)
{
    <FluentProgressRing />
}
else if (taxRates != null)
{
    <FluentButton OnClick="@CreateButtonClick">Nuova Aliquota Iva</FluentButton>
    <FluentDataGrid Items="@taxRates.AsQueryable()" AutoFit="true" RowSize="DataGridRowSize.Medium" ShowHover="true">
        <PropertyColumn Property="@(p => p.Code)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Description)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Rate)" Sortable="true" Format="p0" Align="Align.End" />
        <PropertyColumn Property="@(p => p.TaxRateNatureName)" Sortable="true" />
        <TemplateColumn Title="Azioni" Align="@Align.End">
            <FluentButton aria-label="Modifica" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => EditButtonClick(context))" />
            <FluentButton aria-label="Elimina" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteButtonClick(context))" />
        </TemplateColumn>
    </FluentDataGrid>
}

@code {

    private HttpClient HttpClient => HttpClientFactory.CreateApiClientVs();
    private bool isLoading = true;
    IEnumerable<TaxRateViewModel>? taxRates;

    private async Task ReloadGrid()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            string uri = "taxrates";
            taxRates = await HttpClient.GetFromJsonAsync<IEnumerable<TaxRateViewModel>>(uri);
        }
        catch (HttpRequestException)
        {
            await DialogService.ShowErrorAsync("Errore durante il caricamento dei dati. Riprova.");
            taxRates = Array.Empty<TaxRateViewModel>();
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ReloadGrid();
    }

    private async Task CreateButtonClick()
    {
        TaxRateInputModel model = new();
        DialogContent content = new();
        DialogParameters parameters = new()
            {
                Title = $"Creazione Aliquota Iva",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true
            };

        var dialog = await DialogService.ShowDialogAsync<TaxRateEditDialog>(content, parameters);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await ReloadGrid();
        }
    }

    private async Task EditButtonClick(TaxRateViewModel context)
    {
        TaxRateInputModel model = new();
        DialogContent content = new() { Id = context.Id }; 
        DialogParameters parameters = new()
            {
                Title = $"Modifica Aliquota Iva",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true
            };

        var dialog = await DialogService.ShowDialogAsync<TaxRateEditDialog>(content, parameters);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await ReloadGrid(); 
        }
    }

    private async Task DeleteButtonClick(TaxRateViewModel context)
    {
        var dialog = await DialogService.ShowConfirmationAsync("Sei sicuro di voler eliminare questo elemento?", "Sì", "No", "Eliminazione");
        var result = await dialog.Result;
        if (result.Cancelled)
            return;

        string uri = $"taxrates/{context.Id}";
        var response = await HttpClient.DeleteAsync(uri);
        if (!response.IsSuccessStatusCode)
        {
            await DialogService.ShowResponseErrorAsync(response);
            return;
        }

        await ReloadGrid();
    }
}
