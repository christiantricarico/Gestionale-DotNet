@page "/customers"

@inject IHttpClientFactory HttpClientFactory
@inject IDialogService DialogService

<h3>Clienti</h3>

@if (isLoading)
{
    <FluentProgressRing />
}
else if (customers != null)
{
    <FluentButton OnClick="@CreateButtonClick">Nuovo cliente</FluentButton>
    <FluentDataGrid Items="@customers.AsQueryable()" AutoFit="true" RowSize="DataGridRowSize.Medium" ShowHover="true">
        <PropertyColumn Property="@(p => p.Code)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Description)" Sortable="true" />
        <PropertyColumn Property="@(p => p.FiscalCode)" Sortable="true" />
        <PropertyColumn Property="@(p => p.VatNumber)" Sortable="true" />
        <TemplateColumn Title="Azioni" Align="@Align.End">
            <FluentButton aria-label="Modifica" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => EditButtonClick(context))" />
            <FluentButton aria-label="Elimina" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteButtonClick(context))" />
        </TemplateColumn>
    </FluentDataGrid>
}

@code {

    private HttpClient HttpClient => HttpClientFactory.CreateApiClientVs();
    private bool isLoading = true;
    IEnumerable<CustomerViewModel>? customers;

    private async Task ReloadGrid()
    {
        isLoading = true;
        StateHasChanged();
        string uri = "customers";
        customers = await HttpClient.GetFromJsonAsync<IEnumerable<CustomerViewModel>>(uri);
        isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await ReloadGrid();
    }

    private async Task CreateButtonClick()
    {
        CustomerEditModel model = new();
        DialogContent content = new();
        DialogParameters parameters = new()
            {
                Title = $"Creazione Cliente",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true
            };

        var dialog = await DialogService.ShowDialogAsync<CustomerEditDialog>(content, parameters);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await ReloadGrid();
        }
    }

    private async Task EditButtonClick(CustomerViewModel context)
    {
        CustomerEditModel model = new();
        DialogContent content = new() { Id = context.Id };
        DialogParameters parameters = new()
            {
                Title = $"Modifica Cliente",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true
            };

        var dialog = await DialogService.ShowDialogAsync<CustomerEditDialog>(content, parameters);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await ReloadGrid();
        }
    }

    private async Task DeleteButtonClick(CustomerViewModel context)
    {
        var dialog = await DialogService.ShowConfirmationAsync("Sei sicuro di voler eliminare questo elemento?", "Sì", "No", "Eliminazione");
        var result = await dialog.Result;
        if (result.Cancelled)
            return;

        string uri = $"customers/{context.Id}";
        var response = await HttpClient.DeleteAsync(uri);
        if (!response.IsSuccessStatusCode)
        {
            await DialogService.ShowResponseErrorAsync(response);
            return;
        }

        await ReloadGrid();
    }
}
