@page "/productcategories"
@page "/categorieprodotto"
@rendermode InteractiveAuto

@inject HttpClient Http

<PageTitle>Categorie prodotto</PageTitle>

<h1>Categorie prodotto</h1>

@if (productCategories is null)
{
    <p>loading ...</p>
}
else
{
    <FluentGrid>
        <FluentGridItem xs="12" md="6" Style="min-width: 300px;">
            <FluentTreeView OnExpandedChange="@HandleOnExpandedChange" CurrentSelectedChanged="@HandleCurrentSelectedChange">
                @{
                    foreach (var item in productCategories)
                    {
                        <FluentTreeItem Data="@item" Text="@item.Description">
                        </FluentTreeItem>
                    }
                }
            </FluentTreeView>
        </FluentGridItem>
        <FluentGridItem xs="12" md="6">
            @if (formModel is not null)
            {
                <EditForm Model="@formModel" OnValidSubmit="@HandleValidSubmit">
                    <FluentStack Orientation="Orientation.Vertical">
                        <div>
                            <FluentTextField Label="Codice" Name="code" @bind-Value="formModel.Code" />
                        </div>
                        <div>
                            <FluentTextField Label="Nome" Name="name" @bind-Value="formModel.Name" />
                        </div>
                        <div>
                            <FluentTextArea Label="Descrizione" Name="description" @bind-Value="formModel.Description" />
                        </div>
                        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Salva</FluentButton>
                    </FluentStack>
                </EditForm>
            }
        </FluentGridItem>
    </FluentGrid>
}

@code {

    string baseUri = "https://localhost:7282/api";
    IEnumerable<ProductCategoryViewModel> productCategories = default!;

    protected override async Task OnInitializedAsync()
    {
        productCategories = await Http.GetFromJsonAsync<IEnumerable<ProductCategoryViewModel>>($"{baseUri}/productcategory") 
            ?? Enumerable.Empty<ProductCategoryViewModel>();
    }

    FluentTreeItem? currentSelected;
    FluentTreeItem? currentAffected;
    ProductCategoryViewModel? formModel;

    private void HandleOnExpandedChange(FluentTreeItem item)
    {
        currentAffected = item;
    }

    private void HandleCurrentSelectedChange(FluentTreeItem item)
    {
        currentSelected = item;
        formModel = item.Data as ProductCategoryViewModel;
    }

    private async Task HandleValidSubmit()
    {
        var inputModel = new ProductCategoryInputModel()
            {
                Id = formModel!.Id,
                Code = formModel.Code,
                Name = formModel.Name,
                Description = formModel.Description
            };

        var response = await Http.PutAsJsonAsync($"{baseUri}/productcategory/update", inputModel);
        if (response.IsSuccessStatusCode)
        {
            //success toast
        }else
        {
            var strError = await response.Content.ReadAsStringAsync();
            var error = JsonSerializer.Deserialize<ErrorViewModel>(strError, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
            Console.WriteLine($"Error: {error?.Code} - {error?.Description}");
        }
    }
}
